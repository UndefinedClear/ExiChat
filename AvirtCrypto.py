class AvirtCrypto():
    def __init__(self) -> None:
        # Character to token mapping (encoding)
        self.tokens = {
            'a': '100', 'b': '101', 'c': '102', 'd': '103', 'e': '104', 'f': '105', 'g': '106', 'h': '107', 'i': '108', 'j': '109',
            'k': '110', 'l': '111', 'm': '112', 'n': '113', 'o': '114', 'p': '115', 'q': '116', 'r': '117', 's': '118', 't': '119',
            'u': '120', 'v': '121', 'C': '122', 'x': '123', 'y': '124', 'z': '125', 'A': '126', '8': '127', '9': '128', '!': '129',
            '"': '130', '#': '131', '$': '132', '%': '133', '&': '134', "'": '135', '(': '136', ')': '137', '*': '138', '+': '139',
            ',': '140', '-': '141', '.': '142', '/': '143', ':': '144', ';': '145', '<': '146', '=': '147', '>': '148', '?': '149',
            '@': '150', '[': '151', '\\': '152', ']': '153', '^': '154', '_': '155', '`': '156', '{': '157', '|': '158', '}': '159',
            '~': '160', ' ': '161', 'а': '053', 'б': '054', 'в': '055', 'г': '056', 'д': '057', 'е': '058', 'ё': '059', 'ж': '060',
            'з': '061', 'и': '062', 'й': '063', 'к': '064', 'л': '065', 'м': '066', 'н': '067', 'о': '068', 'п': '069', 'р': '070',
            'с': '071', 'т': '072', 'у': '073', 'ф': '074', 'х': '075', 'ц': '076', 'ч': '077', 'ш': '078', 'щ': '079', 'ъ': '080',
            'ы': '081', 'ь': '082', 'э': '083', 'ю': '084', 'я': '085', 'А': '086', 'Б': '087', 'В': '088', 'Г': '089', 'Д': '090',
            'Е': '091', 'Ё': '092', 'Ж': '093', 'З': '094', 'И': '095', 'Й': '096', 'К': '097', 'Л': '098', 'М': '099', '0': '000',
            '1': '001', '2': '002', '3': '003', '4': '004', '5': '005', '6': '006', '7': '007', 'w': '122', 'B': '029', 'D': '030',
            'E': '031', 'F': '032', 'G': '033', 'H': '034', 'I': '035', 'J': '036', 'K': '037', 'L': '038', 'M': '039', 'N': '040',
            'O': '041', 'P': '042', 'Q': '043', 'R': '044', 'S': '045', 'T': '046', 'U': '047', 'V': '048', 'W': '049', 'X': '050',
            'Y': '051', 'Z': '052', 'Т': '053', ' ': '054', '|': '055', ':': '056', ';': '057', '<': '058', '=': '057', '>': '058',
            '1': '059', '2': '060', '3': '061', '4': '062', '5': '063', '6': '064', '7': '065', '8': '066', '9': '067', '0': '068'
        }

        # Reverse the token map (for decoding)
        self.tokens_reversed = {v: k for k, v in self.tokens.items()}

    def encode(self, input: str) -> str:
        """Encode the input string using the token map."""
        converted = ""
        for letter in input:
            converted += self.tokens.get(letter, '')  # Use empty string for undefined characters
        return converted

    def decode(self, input: str) -> str:
        """Decode the input string using the reversed token map."""
        converted = ""
        memory = ""
        shag = 0
        for symbol in input:
            if shag != 3:
                shag += 1
                memory += symbol
            else:
                converted += self.tokens_reversed.get(memory, '')  # Use empty string for undefined tokens
                memory = symbol
                shag = 1
        
        # Handle the last part if necessary
        if shag != 0:
            converted += self.tokens_reversed.get(memory, '')
        
        return converted