class AvirtCrypto():
    def __init__(self) -> None:
        # Character to token mapping (encoding)
        self.tokens = {
            '0': '000', '1': '001', '2': '002', '3': '003', '4': '004', '5': '005', '6': '006', '7': '007', '8': '008', '9': '009',
            'a': '010', 'b': '011', 'c': '012', 'd': '013', 'e': '014', 'f': '015', 'g': '016', 'h': '017', 'i': '018', 'j': '019',
            'k': '020', 'l': '021', 'm': '022', 'n': '023', 'o': '024', 'p': '025', 'q': '026', 'r': '027', 's': '028', 't': '029',
            'u': '030', 'v': '031', 'w': '032', 'x': '033', 'y': '034', 'z': '035', 'A': '036', 'B': '037', 'C': '038', 'D': '039',
            'E': '040', 'F': '041', 'G': '042', 'H': '043', 'I': '044', 'J': '045', 'K': '046', 'L': '047', 'M': '048', 'N': '049',
            'O': '050', 'P': '051', 'Q': '052', 'R': '053', 'S': '054', 'T': '055', 'U': '056', 'V': '057', 'W': '058', 'X': '059',
            'Y': '060', 'Z': '061', '!': '062', '"': '063', '#': '064', '$': '065', '%': '066', '&': '067', "'": '068', '(': '069',
            ')': '070', '*': '071', '+': '072', ',': '073', '-': '074', '.': '075', '/': '076', ':': '077', ';': '078', '<': '079',
            '=': '080', '>': '081', '?': '082', '@': '083', '[': '084', '\\': '085', ']': '086', '^': '087', '_': '088', '`': '089',
            '{': '090', '|': '091', '}': '092', '~': '093', ' ': '094', 'а': '095', 'б': '096', 'в': '097', 'г': '098', 'д': '099',
            'е': '100', 'ё': '101', 'ж': '102', 'з': '103', 'и': '104', 'й': '105', 'к': '106', 'л': '107', 'м': '108', 'н': '109',
            'о': '110', 'п': '111', 'р': '112', 'с': '113', 'т': '114', 'у': '115', 'ф': '116', 'х': '117', 'ц': '118', 'ч': '119',
            'ш': '120', 'щ': '121', 'ъ': '122', 'ы': '123', 'ь': '124', 'э': '125', 'ю': '126', 'я': '127', 'А': '128', 'Б': '129',
            'В': '130', 'Г': '131', 'Д': '132', 'Е': '133', 'Ё': '134', 'Ж': '135', 'З': '136', 'И': '137', 'Й': '138', 'К': '139',
            'Л': '140', 'М': '141', 'Н': '142', 'О': '143', 'П': '144', 'Р': '145', 'С': '146', 'Т': '147', 'У': '148', 'Ф': '149',
            'Х': '150', 'Ц': '151', 'Ч': '152', 'Ш': '153', 'Щ': '154', 'Ъ': '155', 'Ы': '156', 'Ь': '157', 'Э': '158', 'Ю': '159',
            'Я': '160', '€': '161', '£': '162', '¥': '163', '₹': '164', '₽': '165', '¢': '166', '₣': '167', '₤': '168', '₵': '169',
            '₯': '170', '₰': '171', '₱': '172', '₹': '173', '₴': '174', '₶': '175', '₷': '176', '₸': '177', 'ℱ': '178', 'Ⅎ': '179',
            'ℳ': '180', 'ℵ': '181', '№': '182', '™': '183', '©': '184', '®': '185', '°': '186', '∞': '187', '√': '188', '∑': '189',
            'π': '190', '∂': '191', '∇': '192', '∈': '193', '∉': '194', '⊆': '195', '⊇': '196', '⊂': '197', '⊃': '198', '⊥': '199',
            ' ': '200', '\n':'201'
        }

        # Reverse the token map (for decoding)
        self.tokens_reversed = {v: k for k, v in self.tokens.items()}

    def encode(self, input: str) -> str:
        """Encode the input string using the token map."""
        converted = ""
        for letter in input:
            converted += self.tokens.get(letter, '')  # Use empty string for undefined characters
        return converted

    def decode(self, input: str) -> str:
        """Decode the input string using the reversed token map."""
        converted = ""
        memory = ""
        shag = 0
        for symbol in input:
            if shag != 3:
                shag += 1
                memory += symbol
            else:
                converted += self.tokens_reversed.get(memory, '')  # Use empty string for undefined tokens
                memory = symbol
                shag = 1
        
        # Handle the last part if necessary
        if shag != 0:
            converted += self.tokens_reversed.get(memory, '')
        
        return converted